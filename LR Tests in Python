{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Likelihood-Ratio tests in Python\n",
    "\n",
    "*This code was written by Jonathan Newman (jonathannewman55@gmail.com)*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set up Ipython environment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Jupyter notebook runs in an iPython environment meaning you will need iPython to autoreload imported files (especially custom packages)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load appropriate modules and packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "import statsmodels.formula.api as smf\n",
    "import scipy\n",
    "import sys ## needed for installation!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mock dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's suppose we're interested in the relationship between labour productivity and ICT adoption. We have cross-sectional df on labour productivity and gross ICT investment at the business level (n=2000) across 10 sectors and 5 size sub-categories. I'll first create a dataframe with randomised entries for industry-level productivity, ICT investment, size and sectors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "## build exemple dataframe in four variables: \n",
    "## productivity, investment, size and sector\n",
    "obs = 2000\n",
    "## first get array of productivity observations\n",
    "mean, std = 45000, 3000\n",
    "product_array = np.random.normal(mean, std, obs)\n",
    "\n",
    "## then get array of investment observations\n",
    "mean, std = 3000, 500\n",
    "invest_array = np.random.normal(mean, std, obs)\n",
    "\n",
    "size_array = np.random.randint(1,5,obs) ## let's suppose there are five size sub-categories\n",
    "sector_array = np.random.randint(1,10,obs) ## let's create 10 sector sub-categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = [\"Labour Productivity\",'ICT Investment',\n",
    "           'Size','Sector']\n",
    "var_list = [product_array,invest_array,\n",
    "            size_array,sector_array]\n",
    "data = pd.DataFrame(var_list,columns).transpose()\n",
    "\n",
    "## remove weakly negative responses before log-transform (small chance there are any)\n",
    "data = data.mask(data <= 0,pd.NA)\n",
    "data.dropna()\n",
    "\n",
    "## Intuitive to think of % change in productivity to % change in investment\n",
    "data['ln_ict'] = data['ICT Investment'].apply(lambda row: math.log(row))\n",
    "data['ln_productivity'] = data['Labour Productivity'].apply(lambda row: math.log(row))\n",
    "\n",
    "## ensure size and sector are recorded as categorical variables\n",
    "data['Size'] = data['Size'].apply(lambda row: str(row))\n",
    "data['Sector'] = data['Sector'].apply(lambda row: str(row))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Likelihood-Ratio test for sector dummies\n",
    "Let's suppose we also want to know whether, in a model with ICT investment, business sector is a significant predictor of labour productivity. One method to do this is to test the joint significance of the categorical sector variables using a Likelihood-Ratio test.\n",
    "\n",
    "Consider two estimators $\\theta_{0}$ (restricted model) and $\\theta_{1}$ (unrestricted model) for a parameter vector $\\theta$. Let $\\mathcal{L}(\\cdot)$ denote the likelihood function and $k$ the number of extra parameters in the unrestricted model. The Likelihood Ratio test is then $LR = -2\\ln{\\frac{\\mathcal{L}(\\theta_{0})}{\\mathcal{L}(\\theta_{1})}}$, asymptotically distributed $\\chi^{2}_{k}$. However it's often convenient to work with log-transformed likelihood functions, yielding the equivalent:\n",
    "\n",
    "- $LR = 2[\\ln\\mathcal{L}(\\theta_{1})-\\ln\\mathcal{L}(\\theta_{0})]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "## First run restricted model without sector dummies\n",
    "formula = \"ln_productivity ~ ln_ict + Size\"\n",
    "mod_ols = smf.ols(formula, data).fit()\n",
    "## get log-likelihood function of OLS model\n",
    "null_ll = mod_ols.llf\n",
    "\n",
    "## Then run unrestricted model with sector dummies\n",
    "formula = formula.replace('ln_ict',\n",
    "                          'Sector + ln_ict')\n",
    "mod_ols = smf.ols(formula, data).fit()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p = 0.825 > 0.05 hence the sector dummies are not jointly significant\n"
     ]
    }
   ],
   "source": [
    "## get log-likelihood function of WLS model\n",
    "alt_ll = mod_ols.llf\n",
    "\n",
    "## compute log-likelihood ratio statistic and p-value\n",
    "l_stat = 2*(alt_ll - null_ll)\n",
    "p = 1 - scipy.stats.chi2.cdf(l_stat, len(set(df['Sector'])))\n",
    "\n",
    "if p < 0.05:\n",
    "    print(f\"p = {p:.3} < 0.05 hence the sector dummies are jointly significant\")\n",
    "else:\n",
    "    print(f\"p = {p:.3} > 0.05 hence the sector dummies are not jointly significant\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In linear models with normally distributed errors, the F test is equivalent to the Likelihood Ratio test. With $q$ restrictions in the restricted model, $n$ observations and $k$ parameters in the unrestricted model, the F-test is $F = \\frac{(R^{2}_{UR}-R^{2}_{R})/q}{(1-R^{2}_{UR})/n-k-1}$. Unlike the Likelihood Ratio test outlined previously, the F test follows a $F_{q,n-k-1}$ distribution. Note that in *finite* samples the equivalence is not exact!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "## First run restricted model without sector dummies\n",
    "formula = \"ln_productivity ~ ln_ict + Size\"\n",
    "rest = smf.ols(formula, data).fit()\n",
    "\n",
    "## Next run unrestricted model with sector dummies\n",
    "formula = formula.replace('ln_ict',\n",
    "                          'Sector + ln_ict')\n",
    "unrest = smf.ols(formula, data).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p = 0.827 > 0.05 hence the sector dummies are not jointly significant\n"
     ]
    }
   ],
   "source": [
    "## Get F-stat numerator\n",
    "fstat_num = (unrest.rsquared - rest.rsquared)/len(set(data['Sector']))\n",
    "\n",
    "## Get degrees of freedom\n",
    "dof = len(data) - unrest.params.size - 1\n",
    "\n",
    "## Get F-stat denominator\n",
    "fstat_den = (1-unrest.rsquared)/dof\n",
    "\n",
    "## Get test statistic and p-value\n",
    "fstat = fstat_num/fstat_den\n",
    "p = 1 - scipy.stats.f.cdf(fstat, len(set(data['Sector'])), dof)\n",
    "\n",
    "if p < 0.05:\n",
    "    print(f\"p = {p:.3} < 0.05 hence the sector dummies are jointly significant\")\n",
    "else:\n",
    "    print(f\"p = {p:.3} > 0.05 hence the sector dummies are not jointly significant\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
